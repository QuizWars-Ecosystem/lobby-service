{{define "lobby_details"}}
    <div class="card">
        <h2>Lobby Details</h2>
        <div class="tab-container">
            <div class="tab-buttons" id="modeTabs">
                {{range $index, $mode := .Modes}}
                    <button class="tab-button{{if eq $index 0}} active{{end}}" onclick="openTab(event, '{{$mode}}')">{{$mode}}</button>
                {{end}}
            </div>

            {{range $index, $mode := .Modes}}
                <div id="{{$mode}}" class="tab-content{{if eq $index 0}} active{{end}}">
                    <table class="lobby-table" data-mode="{{$mode}}">
                        <thead>
                        <tr>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'id')">Lobby ID</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'match')">Match %</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'players')">Players</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'avgRating')">Avg Rating</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'minRating')">Min Rating</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'maxRating')">Max Rating</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'commonCats')">Common Categories</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'waitTime')">Wait Time</th>
                            <th onclick="sortLobbyTable(this, '{{$mode}}', 'status')">Status</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        {{range $lobby := index $.RowsByMode $mode}}
                            <tr data-id="{{$lobby.ID}}"
                                data-players="{{$lobby.PlayersCount}}"
                                data-max-players="{{$lobby.MaxPlayers}}"
                                data-avg-rating="{{printf "%.0f" $lobby.AvgRating}}"
                                data-min-rating="{{$lobby.MinRating}}"
                                data-max-rating="{{$lobby.MaxRating}}"
                                data-wait-time="{{$lobby.WaitDuration}}"
                                data-status="{{$lobby.Status}}"
                                data-rating-diff="{{$lobby.RatingDiffValue}}"
                                data-category-match="{{$lobby.CategoryMatchValue}}"
                                data-rating-diff-valid="{{$lobby.RatingDiffValid}}"
                                data-category-match-valid="{{$lobby.CategoryMatchValid}}"
                                data-common-cats="{{json $lobby.CommonCats}}"
                                data-unique-cats="{{json $lobby.UniqueCats}}">
                                <td>{{$lobby.ID}}</td>
                                <td>
                                    {{template "match_condition_chart" (dict
                                    "OverallValid" $lobby.OverallValid
                                    "RatingDiffValue" $lobby.RatingDiffValue
                                    "CategoryMatchValue" $lobby.CategoryMatchValue
                                    "Mode" $lobby.Mode
                                    "Config" $.Config
                                    )}}
                                </td>
                                <td>{{$lobby.PlayersCount}}/{{$lobby.MaxPlayers}}</td>
                                <td>{{printf "%.0f" $lobby.AvgRating}}</td>
                                <td>{{$lobby.MinRating}}</td>
                                <td>{{$lobby.MaxRating}}</td>
                                <td>{{formatCategoryList $lobby.CommonCats}}</td>
                                <td>{{$lobby.WaitDuration}}</td>
                                <td><span class="badge {{$lobby.StatusClass}}">{{$lobby.Status}}</span></td>
                                <td>
                                    <button class="view-lobby-btn" data-lobby-id="{{$lobby.ID}}">View Details</button>
                                </td>
                            </tr>
                        {{end}}
                        </tbody>
                    </table>
                </div>
            {{end}}
        </div>
    </div>

    <!-- Модальное окно для деталей лобби -->
    <div id="lobbyModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="modalContent"></div>
        </div>
    </div>

    <script>
        // Функция для определения класса процента соответствия
        function getMatchPercentClass(percent) {
            const rounded = Math.min(100, Math.max(0, Math.floor(percent / 10) * 10));
            return `match-percent-${rounded}`;
        }

        // Обработчик клика по кнопке View Details
        document.addEventListener('DOMContentLoaded', function() {
            // Обработчик закрытия модального окна
            document.querySelector('.modal .close').addEventListener('click', function() {
                document.getElementById('lobbyModal').style.display = 'none';
            });

            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('view-lobby-btn')) {
                    const row = e.target.closest('tr');
                    const modal = document.getElementById('lobbyModal');
                    const content = document.getElementById('modalContent');

                    // Получаем все данные из data-атрибутов
                    const lobbyData = {
                        id: row.getAttribute('data-id'),
                        mode: row.closest('.tab-content').id,
                        playersCount: row.getAttribute('data-players'),
                        maxPlayers: row.getAttribute('data-max-players'),
                        avgRating: row.getAttribute('data-avg-rating'),
                        minRating: row.getAttribute('data-min-rating'),
                        maxRating: row.getAttribute('data-max-rating'),
                        waitTime: row.getAttribute('data-wait-time'),
                        status: row.getAttribute('data-status'),
                        statusClass: row.querySelector('.badge').className,
                        ratingDiff: parseFloat(row.getAttribute('data-rating-diff')),
                        categoryMatch: parseFloat(row.getAttribute('data-category-match')),
                        ratingDiffValid: row.getAttribute('data-rating-diff-valid') === 'true',
                        categoryMatchValid: row.getAttribute('data-category-match-valid') === 'true',
                        commonCats: JSON.parse(row.getAttribute('data-common-cats')),
                        uniqueCats: JSON.parse(row.getAttribute('data-unique-cats'))
                    };

                    // Получаем конфиг для этого режима
                    const modeConfig = {
                        {{range $mode, $cfg := .Config.ServiceConfig.Matcher.Configs}}
                        '{{$mode}}': {
                            maxRatingDiff: {{$cfg.MaxRatingDiff}},
                            minCategoryMatch: {{$cfg.MinCategoryMatch}},
                            ratingWeight: {{$cfg.RatingWeight}},
                            categoryWeight: {{$cfg.CategoryWeight}},
                            fillWeight: {{$cfg.FillWeight}}
                        },
                        {{end}}
                    }[lobbyData.mode] || {
                        maxRatingDiff: 1000,
                        minCategoryMatch: 0.3,
                        ratingWeight: 0.3,
                        categoryWeight: 0.5,
                        fillWeight: 0.2
                    };

                    // Формируем HTML для модального окна
                    content.innerHTML = `
                        <h2>Lobby Details: ${lobbyData.id}</h2>

                        <div class="lobby-summary">
                            <div class="summary-item">
                                <span class="label">Mode:</span>
                                <span class="value">${lobbyData.mode}</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Players:</span>
                                <span class="value">${lobbyData.playersCount}/${lobbyData.maxPlayers}</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Status:</span>
                                <span class="value badge ${lobbyData.statusClass}">${lobbyData.status}</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Wait Time:</span>
                                <span class="value">${lobbyData.waitTime}</span>
                            </div>
                        </div>

                        <h3>Match Conditions</h3>
                        <table class="conditions-table">
                            <thead>
                                <tr>
                                    <th>Condition</th>
                                    <th>Required</th>
                                    <th>Actual</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Rating Diff</td>
                                    <td>≤ ${modeConfig.maxRatingDiff}</td>
                                    <td>${lobbyData.ratingDiff.toFixed(0)}</td>
                                    <td>
                                        <span class="badge ${lobbyData.ratingDiffValid ? 'badge-success' : 'badge-danger'}">
                                            ${lobbyData.ratingDiffValid ? 'OK' : 'FAIL'}
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td>Category Match</td>
                                    <td>≥ ${(modeConfig.minCategoryMatch * 100).toFixed(0)}%</td>
                                    <td>
                                        <span class="percentage ${getMatchPercentClass(lobbyData.categoryMatch * 100)}">
                                            ${(lobbyData.categoryMatch * 100).toFixed(0)}%
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge ${lobbyData.categoryMatchValid ? 'badge-success' : 'badge-danger'}">
                                            ${lobbyData.categoryMatchValid ? 'OK' : 'FAIL'}
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <h3>Categories Analysis</h3>
                        <div class="categories-analysis">
                            <div class="categories-section">
                                <h4>Common Categories (≥60% players)</h4>
                                <div class="categories-list">
                                    ${lobbyData.commonCats.length > 0 ?
                        lobbyData.commonCats.join(', ') :
                        '<span class="text-muted">None</span>'}
                                </div>
                            </div>
                            <div class="categories-section">
                                <h4>Unique Categories</h4>
                                <div class="categories-list">
                                    ${lobbyData.uniqueCats.length > 0 ?
                        lobbyData.uniqueCats.join(', ') :
                        '<span class="text-muted">None</span>'}
                                </div>
                            </div>
                        </div>

                        <h3>Players</h3>
                        <table class="players-table">
                            <thead>
                                <tr>
                                    <th>Player ID</th>
                                    <th>Rating</th>
                                    <th>Categories</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${Array.from(row.querySelectorAll('.player-data')).map(player => `
                                    <tr>
                                        <td>${player.getAttribute('data-player-id')}</td>
                                        <td>${player.getAttribute('data-rating')}</td>
                                        <td>${JSON.parse(player.getAttribute('data-categories')).join(', ')}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;

                    modal.style.display = 'block';
                }
            });
        });

        // Функция сортировки таблицы (исправленная)
        function sortLobbyTable(header, mode, sortKey) {
            const table = document.querySelector(`#${mode} table.lobby-table`);
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            // Определяем направление сортировки
            const currentDir = header.getAttribute('data-sort-dir') || 'none';
            const newDir = currentDir === 'asc' ? 'desc' : 'asc';

            // Сбрасываем сортировку для всех заголовков
            table.querySelectorAll('th').forEach(th => {
                th.removeAttribute('data-sort-dir');
                th.classList.remove('sorted-asc', 'sorted-desc');
            });

            // Устанавливаем новое направление для текущего заголовка
            header.setAttribute('data-sort-dir', newDir);
            header.classList.add(newDir === 'asc' ? 'sorted-asc' : 'sorted-desc');

            // Сортируем строки
            rows.sort((a, b) => {
                let aValue, bValue;

                switch(sortKey) {
                    case 'id':
                        aValue = a.getAttribute('data-id');
                        bValue = b.getAttribute('data-id');
                        return newDir === 'asc' ?
                            aValue.localeCompare(bValue) :
                            bValue.localeCompare(aValue);

                    case 'match':
                        aValue = parseFloat(a.getAttribute('data-category-match'));
                        bValue = parseFloat(b.getAttribute('data-category-match'));
                        break;

                    case 'players':
                        aValue = parseInt(a.getAttribute('data-players'));
                        bValue = parseInt(b.getAttribute('data-players'));
                        break;

                    case 'avgRating':
                    case 'minRating':
                    case 'maxRating':
                        aValue = parseFloat(a.getAttribute(`data-${sortKey}`));
                        bValue = parseFloat(b.getAttribute(`data-${sortKey}`));
                        break;

                    case 'commonCats':
                        aValue = JSON.parse(a.getAttribute('data-common-cats')).length;
                        bValue = JSON.parse(b.getAttribute('data-common-cats')).length;
                        break;

                    case 'waitTime':
                        aValue = timeStringToSeconds(a.getAttribute('data-wait-time'));
                        bValue = timeStringToSeconds(b.getAttribute('data-wait-time'));
                        break;

                    case 'status':
                        aValue = a.getAttribute('data-status');
                        bValue = b.getAttribute('data-status');
                        return newDir === 'asc' ?
                            aValue.localeCompare(bValue) :
                            bValue.localeCompare(aValue);

                    default:
                        return 0;
                }

                return newDir === 'asc' ? aValue - bValue : bValue - aValue;
            });

            // Перестраиваем таблицу
            rows.forEach(row => tbody.appendChild(row));
        }

        // Функция преобразования времени в секунды
        function timeStringToSeconds(timeStr) {
            if (!timeStr || timeStr === '-' || timeStr === '<1s') return 0;

            const parts = timeStr.split(':').reverse();
            let seconds = 0;

            if (parts.length > 0) seconds += parseFloat(parts[0]);
            if (parts.length > 1) seconds += parseInt(parts[1]) * 60;
            if (parts.length > 2) seconds += parseInt(parts[2]) * 3600;

            return seconds;
        }
    </script>
{{end}}